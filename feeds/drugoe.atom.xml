<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Maks blog</title><link href="https://samael500.github.io/" rel="alternate"></link><link href="https://samael500.github.io/feeds/drugoe.atom.xml" rel="self"></link><id>https://samael500.github.io/</id><updated>2016-09-26T15:00:00+03:00</updated><entry><title>Отчеты coverage в TeamCity</title><link href="https://samael500.github.io/articles/drugoe/otchety-coverage-v-teamcity/" rel="alternate"></link><published>2016-09-26T15:00:00+03:00</published><author><name>Maks</name></author><id>tag:samael500.github.io,2016-09-26:articles/drugoe/otchety-coverage-v-teamcity/</id><summary type="html">&lt;p&gt;Мы, в &lt;a href="http://wbtech.pro/"&gt;&lt;span class="caps"&gt;WB&lt;/span&gt;&amp;#8212;Tech&lt;/a&gt; в качестве системы непрерывной
интеграции используем &lt;a href="https://www.jetbrains.com/teamcity/"&gt;TeamCity&lt;/a&gt;.
А саму разработку ведем в приватных репозиториях
на &lt;a href="https://github.com/"&gt;github&lt;/a&gt;. С задачей запуска тестов и публикации
статуса выполнения в ветку на &lt;code&gt;github&lt;/code&gt; &lt;code&gt;TeamCity&lt;/code&gt; справляется отлично. Но
выводить отчет по покрытию кода
&lt;a href="https://confluence.jetbrains.com/display/TCD9/Code+Coverage"&gt;из коробки&lt;/a&gt;
умеет только для &lt;code&gt;Java&lt;/code&gt; и &lt;code&gt;.NET&lt;/code&gt;, а это не наш профиль.
Хотелось получить собственную систему, похожую на
&lt;a href="https://coveralls.io/github/Samael500"&gt;Coveralls&lt;/a&gt; работающую с &lt;code&gt;python&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;В результате статус пулреквеста зависит от проверки покрытия&amp;nbsp;кода.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pending" class="center" src="/media/teamcity-coverage/github_pending.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="failure" class="center" src="/media/teamcity-coverage/github_failure.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="success" class="center" src="/media/teamcity-coverage/github_success.png" /&gt;&lt;/p&gt;
&lt;h2 id="formirovanie-otcheta"&gt;&lt;a class="toclink" href="#formirovanie-otcheta"&gt;Формирование&amp;nbsp;отчета&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Первым делом, необходимо сформировать данные о покрытии кода. Делаем это
с помощью утилиты &lt;a href="https://coverage.readthedocs.io/"&gt;Coverage.py&lt;/a&gt;.
Т.к. для удобства работы с проектом, мы используем &lt;code&gt;Makefile&lt;/code&gt;,
то пропишем в нем дополнительные команды, для запуска тестов с покрытием кода,
и формирования&amp;nbsp;отчета.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;VENV_PATH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;HOME&lt;span class="k"&gt;)&lt;/span&gt;/venv/bin
&lt;span class="nv"&gt;PROJ_NAME&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; my_awesome_project

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="nf"&gt;ci_test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover_test&lt;/span&gt; &lt;span class="n"&gt;cover_report&lt;/span&gt;

&lt;span class="nf"&gt;cover_test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;VENV_PATH&lt;span class="k"&gt;)&lt;/span&gt;/coverage run --source&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PROJ_NAME&lt;span class="k"&gt;)&lt;/span&gt; manage.py &lt;span class="nb"&gt;test&lt;/span&gt; -v &lt;span class="m"&gt;2&lt;/span&gt; --noinput

&lt;span class="nf"&gt;cover_report&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;VENV_PATH&lt;span class="k"&gt;)&lt;/span&gt;/coverage report -m
    &lt;span class="k"&gt;$(&lt;/span&gt;VENV_PATH&lt;span class="k"&gt;)&lt;/span&gt;/coverage html
    &lt;span class="k"&gt;$(&lt;/span&gt;VENV_PATH&lt;span class="k"&gt;)&lt;/span&gt;/coverage-badge &amp;gt; htmlcov/coverage.svg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Команда &lt;code&gt;cover_test&lt;/code&gt; запускает джанговские тесты, и замеряет покрытие кода.
Команда &lt;code&gt;cover_report&lt;/code&gt; выводит в консоль отчет о покрытии, а также формирует
&lt;code&gt;html&lt;/code&gt; отчет и, при помощи утилиты
&lt;a href="https://github.com/dbrgn/coverage-badge"&gt;coverage-badge&lt;/a&gt; формирует красивый
бейджик со статусом покрытия кода &lt;img alt="badge" src="/media/teamcity-coverage/badge.svg" /&gt;.&lt;/p&gt;
&lt;p&gt;После того, как исходные данные для отчета подготовлены, мы можем отображать
результат. Для этого нужно сконфигурировать сбор артефактов в &lt;code&gt;teamcity&lt;/code&gt;.
Делается это на вкладке &lt;code&gt;General Settings&lt;/code&gt; в настройках проекта. Мы копируем в
артефакты папку &lt;code&gt;htmlcov&lt;/code&gt; содержащую отчет и&amp;nbsp;бейджик.&lt;/p&gt;
&lt;p&gt;&lt;img alt="General Settings" class="center shadow" src="/media/teamcity-coverage/artifacts.png" /&gt;&lt;/p&gt;
&lt;p&gt;После следующего запуска тестов, перейдя во вкладку &lt;code&gt;Artifacts&lt;/code&gt;, можно увидеть
дерево артефактов данного&amp;nbsp;билда.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Artifacts tree" class="center shadow" src="/media/teamcity-coverage/artifacts_tree.png" /&gt;&lt;/p&gt;
&lt;p&gt;Сами артефакты также доступны авторизованным пользователям &lt;code&gt;TeamCity&lt;/code&gt;
напрямую по ссылкам&amp;nbsp;вида:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/repository/download/%teamcity.project.id%/%teamcity.build.id%:id/htmlcov/index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/repository/download/%teamcity.project.id%/.lastFinished/htmlcov/index.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Более подробно о доступе к артефактам в &lt;a href="https://confluence.jetbrains.com/display/TCD9/Patterns+For+Accessing+Build+Artifacts"&gt;документации&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="uvedomleniia-statusa-na-github"&gt;&lt;a class="toclink" href="#uvedomleniia-statusa-na-github"&gt;Уведомления статуса на&amp;nbsp;Github&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Имея готовый отчет будем отправлять вебхуки на &lt;code&gt;github&lt;/code&gt; с указанием статуса
покрытия кода. Для этого добавим простые &lt;code&gt;build steps&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build steps" class="center shadow" src="/media/teamcity-coverage/build_steps.png" /&gt;&lt;/p&gt;
&lt;h4 id="coverage-pending-hook"&gt;&lt;a class="toclink" href="#coverage-pending-hook"&gt;Coverage pending&amp;nbsp;hook&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Заставляем гитхаб ждать отчета по покрытию&amp;nbsp;кода.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Runner type&lt;/strong&gt; &lt;em&gt;Command&amp;nbsp;Line&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute step&lt;/strong&gt; &lt;em&gt;Even if some of the previous steps&amp;nbsp;failed&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Custom&amp;nbsp;script&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;GITHUB OWNER&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;REPO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;REPO NAME&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;SHA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%build.vcs.number%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

curl &lt;span class="s2"&gt;&amp;quot;https://api.github.com/repos/&lt;/span&gt;&lt;span class="nv"&gt;$OWNER&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$REPO&lt;/span&gt;&lt;span class="s2"&gt;/statuses/&lt;/span&gt;&lt;span class="nv"&gt;$SHA&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -X POST &lt;span class="se"&gt;\&lt;/span&gt;
    -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -H &lt;span class="s2"&gt;&amp;quot;Authorization: token &amp;lt;GITHUB API TOKEN&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -d &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;state&amp;quot;: &amp;quot;pending&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;description&amp;quot;: &amp;quot;Coverage pending.&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;context&amp;quot;: &amp;quot;continuous-integration/coverage&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    }&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="badge-copy"&gt;&lt;a class="toclink" href="#badge-copy"&gt;Badge&amp;nbsp;copy&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Копируем сформированный бейджик, в папку доступную напрямую через вебсервер.
Для того, чтобы &lt;code&gt;github&lt;/code&gt; имел доступ к бейджику без аутентификации в &lt;code&gt;teamcity&lt;/code&gt;.
Если у вас разрешен гостевой доступ - то этот шаг выполнять не&amp;nbsp;обязательно.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Runner type&lt;/strong&gt; &lt;em&gt;Command&amp;nbsp;Line&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute step&lt;/strong&gt; &lt;em&gt;Even if some of the previous steps&amp;nbsp;failed&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Custom&amp;nbsp;script&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;BADGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/path/to/public/dir/badges/%teamcity.project.id%/%teamcity.build.branch%-coverage.svg&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BADGE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
mkdir -p &lt;span class="nv"&gt;$DIR&lt;/span&gt;
cp -f htmlcov/coverage.svg &lt;span class="nv"&gt;$BADGE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="coverage-finish-hook"&gt;&lt;a class="toclink" href="#coverage-finish-hook"&gt;Coverage finish&amp;nbsp;hook&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;По окончанию тестов, отправляем отчет на&amp;nbsp;гитхаб.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Runner type&lt;/strong&gt; &lt;em&gt;Command&amp;nbsp;Line&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute step&lt;/strong&gt; &lt;em&gt;Even if some of the previous steps&amp;nbsp;failed&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Custom&amp;nbsp;script&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;OWNER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;GITHUB OWNER&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;REPO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;REPO NAME&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;SHA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%build.vcs.number%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;REPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://&amp;lt;YOU TEAMCITY DOMAIN&amp;gt;/repository/download/%teamcity.project.id%/%teamcity.build.id%:id/htmlcov/index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;COVERAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat ./htmlcov/index.html &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;&amp;lt;span class=&amp;quot;pc_cov&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -o &lt;span class="s1"&gt;&amp;#39;[0-9]\+&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$COVERAGE&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -ge &lt;span class="s2"&gt;&amp;quot;85&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nv"&gt;STATUS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;STATUS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;failure&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

curl &lt;span class="s2"&gt;&amp;quot;https://api.github.com/repos/&lt;/span&gt;&lt;span class="nv"&gt;$OWNER&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$REPO&lt;/span&gt;&lt;span class="s2"&gt;/statuses/&lt;/span&gt;&lt;span class="nv"&gt;$SHA&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -X POST &lt;span class="se"&gt;\&lt;/span&gt;
    -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -H &lt;span class="s2"&gt;&amp;quot;Authorization: token &amp;lt;GITHUB API TOKEN&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -d &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;state&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$STATUS&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;target_url&amp;quot;: &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$REPORT_URL&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;description&amp;quot;: &amp;quot;Coverage &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$COVERAGE&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;quot;context&amp;quot;: &amp;quot;continuous-integration/coverage&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;    }&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В данном случае, если покрытие менее 85%, то данная проверка будет считаться
ошибкой, и в гитхабе отметиться красным&amp;nbsp;крестиком.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fail" class="center shadow" src="/media/teamcity-coverage/coverage_fail.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="success" class="center shadow" src="/media/teamcity-coverage/coverage_success.png" /&gt;&lt;/p&gt;
&lt;h4 id="beidzhik-v-readme"&gt;&lt;a class="toclink" href="#beidzhik-v-readme"&gt;Бейджик в&amp;nbsp;readme&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Для отображения бейджика в &lt;code&gt;README.md&lt;/code&gt; добавим ссылку, на последний успешний&amp;nbsp;билд.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;!&lt;span class="o"&gt;[&lt;/span&gt;coverage report&lt;span class="o"&gt;](&lt;/span&gt;http://&amp;lt;TEAMCITY DOMAIN&amp;gt;/badges/&amp;lt;TEAMCITY PROJ ID&amp;gt;/master-coverage.svg&lt;span class="o"&gt;)](&lt;/span&gt;http://&amp;lt;TEAMCITY DOMAIN&amp;gt;/repository/download/&amp;lt;TEAMCITY PROJ ID&amp;gt;/.lastFinished/htmlcov/index.html&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Где &lt;code&gt;/badges/&amp;lt;TEAMCITY PROJ ID&amp;gt;/&lt;/code&gt; доступна для анонимных посетителей, чтобы &lt;code&gt;github&lt;/code&gt; мог закешировать&amp;nbsp;изображение.&lt;/p&gt;
&lt;p&gt;Теперь в &lt;code&gt;README&lt;/code&gt; виден кликабельный бейджик с покрытием&amp;nbsp;кода.&lt;/p&gt;
&lt;p&gt;&lt;img alt="readme" class="center shadow" src="/media/teamcity-coverage/readme.md.png" /&gt;&lt;/p&gt;
&lt;p&gt;Кликнув на который, мы попадаем в отчет по покрытию&amp;nbsp;кода.&lt;/p&gt;
&lt;p&gt;&lt;img alt="report" class="center shadow" src="/media/teamcity-coverage/report.png" /&gt;&lt;/p&gt;</summary><category term="ci"></category><category term="coverage"></category><category term="python"></category><category term="github"></category><category term="teamcity"></category></entry><entry><title>Определение IP адреса посетителя в отчетах Yandex Метрика</title><link href="https://samael500.github.io/articles/drugoe/opredelenie-ip-adresa-posetitelia-v-otchetakh-yandex-metrika/" rel="alternate"></link><published>2015-09-22T15:00:00+03:00</published><author><name>Maks</name></author><id>tag:samael500.github.io,2015-09-22:articles/drugoe/opredelenie-ip-adresa-posetitelia-v-otchetakh-yandex-metrika/</id><summary type="html">&lt;p&gt;Обновленная метрика не отображает информацию об &lt;code&gt;ip&lt;/code&gt; адресе посетителей
сайта, сделано это с целью обезличивания статистики посещений. Данная
&lt;a href="http://clubs.ya.ru/metrika/replies.xml?item_no=10888"&gt;новость&lt;/a&gt; была
официально озвучена в клубе метрики. Обезличивание это здорово, но порой
хочется узнать действительно ли в статистике отображаются различные
посетители, или же это одно и тот же лицо, которое заходит с разных
браузеров или устройств. А может быть у Вас несколько счетчиков метрики, и Вам
интересно какие из посетителей ресурса &lt;em&gt;A&lt;/em&gt;, посещают также ресурсы &lt;em&gt;B&lt;/em&gt; или &lt;em&gt;C&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Также различным рекламщикам, может быть интересна информация об &lt;code&gt;ip&lt;/code&gt; адресах,
например, с целью вычисления ботов&amp;nbsp;скликеров. &lt;/p&gt;
&lt;p&gt;К счастью, метрика достаточно гибкая и позволяет устанавливать
пользовательские параметры, тем самым создавать специальный
персонализированный отчет о действиях пользователей. Благодаря чему,
мы можем привязать информацию об &lt;code&gt;ip&lt;/code&gt; адресе к конкретному&amp;nbsp;визиту. &lt;/p&gt;
&lt;h2 id="parametry-vizitov-yandex-metrika"&gt;&lt;a class="toclink" href="#parametry-vizitov-yandex-metrika"&gt;Параметры визитов&amp;nbsp;yandex.метрика&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Сервис &lt;a href="https://yandex.ru/support/metrika/reports/visit-params.xml"&gt;параметры визитов&lt;/a&gt;
позволяет прикрепить к информации о посещении &lt;code&gt;json&lt;/code&gt; словарь с дополнительными
параметрами. Для этого необходимо в конструктор счетчика добавить аргумент
&lt;code&gt;params&lt;/code&gt; с необходимыми&amp;nbsp;значениями.&lt;/p&gt;
&lt;p&gt;Например, если информация об &lt;code&gt;ip&lt;/code&gt; адресе будет содержаться в переменой
&lt;code&gt;userip&lt;/code&gt;, то словарь параметры может выглядеть следующим&amp;nbsp;образом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userip&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Конструктор счетчика, в таком случае, будет выглядеть&amp;nbsp;так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yaCounterXXXXXX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ya&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Metrika&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;XXXXXX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;clickmap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;trackLinks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;accurateTrackBounce&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;webvisor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Где &lt;code&gt;XXXXXX&lt;/code&gt; идентификатор&amp;nbsp;счетчика.&lt;/p&gt;
&lt;p&gt;Чтобы просмотреть полученные результаты необходимо перейти: &lt;code&gt;метрика&lt;/code&gt; &amp;rarr;
&lt;code&gt;отчеты&lt;/code&gt; &amp;rarr; &lt;code&gt;стандартные отчеты&lt;/code&gt; &amp;rarr; &lt;code&gt;содержание&lt;/code&gt; &amp;rarr;
&lt;code&gt;параметры визитов&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="visit params path" class="center shadow" src="/media/yametrika-ip/visit_params_path.png" title="Путь к отчету по параметрам визитов." /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="visit params detail" class="center shadow" src="/media/yametrika-ip/visit_params_detail.png" title="Отчет по параметрам визитов." /&gt;&lt;/p&gt;
&lt;p&gt;Но, сами по себе &lt;code&gt;ip&lt;/code&gt; адреса не столь информативны, интерестнее просмотреть
связь посещения и &lt;code&gt;ip&lt;/code&gt; адреса в вебвизоре. Для этого в вебвизор нужно добавить
столбец&amp;nbsp;&amp;#8220;Параметры&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="webvisor col params" class="center shadow" src="/media/yametrika-ip/webvisor_col_params.png" title="Добавление столбца параметры в вебвизоре." /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="webvisor ip detail" class="center shadow" src="/media/yametrika-ip/webvisor_ip_detail.png" title="Параметры визитов в вебвизоре." /&gt;&lt;/p&gt;
&lt;h2 id="opredelenie-ip-adresa"&gt;&lt;a class="toclink" href="#opredelenie-ip-adresa"&gt;Определение &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;адреса&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Выше я упоминал о переменной в которой содержится &lt;code&gt;ip&lt;/code&gt; адрес посетителя.
Задать эту переменную легко если Вы имеете доступ к&amp;nbsp;бэкэнду.&lt;/p&gt;
&lt;p&gt;Например в &lt;code&gt;django&lt;/code&gt;, предварительно подключив
&lt;code&gt;django.core.context_processors.request&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;userip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ request.META.REMOTE_ADDR }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Или, если Вы используете&amp;nbsp;проксирование:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;userip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ request.META.HTTP_X_REAL_IP }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Или, например, в &lt;code&gt;php&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;userip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;? echo $_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;];?&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Но что если сайт статический и какой либо бэкэнд отсутствует? В таком случае
можно воспользоваться сервисом &lt;a href="https://l2.io"&gt;l2.io&lt;/a&gt;, который позволяет
получить &lt;code&gt;ip&lt;/code&gt; на клиенте. К примеру Ваш &lt;code&gt;ip&lt;/code&gt; адрес:
&lt;strong&gt;&lt;script type="text/javascript" src="https://www.l2.io/ip.js"&gt;&lt;/script&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Чтобы задать &lt;code&gt;ip&lt;/code&gt; адрес в переменную, нужно вставить такой&amp;nbsp;скрипт:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.l2.io/ip.js?var=userip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Полный фрагмент скрипта яндекс метрики будет выглядеть&amp;nbsp;так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- получаем ip адрес одним из указанных вариантов --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.l2.io/ip.js?var=userip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Yandex.Metrika counter --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yaCounterXXXXXX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ya&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Metrika&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;XXXXXX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;clickmap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;trackLinks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;accurateTrackBounce&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;webvisor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// продолжение счетчика&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- /Yandex.Metrika counter --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ip"></category><category term="javascript"></category><category term="yandex"></category><category term="metrika"></category><category term="watch"></category></entry><entry><title>Автоматическое содержание в Pelican</title><link href="https://samael500.github.io/articles/drugoe/avtomaticheskoe-soderzhanie-v-pelican/" rel="alternate"></link><published>2015-09-02T15:00:00+03:00</published><author><name>Maks</name></author><id>tag:samael500.github.io,2015-09-02:articles/drugoe/avtomaticheskoe-soderzhanie-v-pelican/</id><summary type="html">&lt;p&gt;Так получается, что некоторые статьи, например
&lt;a href="https://samael500.github.io/articles/python/ralli-na-brauzerakh/"&gt;ралли на браузерах&lt;/a&gt;. Содержат в себе несколько
уровней заголовков. И в связи с этим, сделаем автоматическую навигацию
по&amp;nbsp;статье.&lt;/p&gt;
&lt;h2 id="iakoria-v-zagolovkakh-markdown"&gt;&lt;a class="toclink" href="#iakoria-v-zagolovkakh-markdown"&gt;Якоря в заголовках&amp;nbsp;markdown&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Для написания постов блога я использую 
&lt;a href="http://daringfireball.net/projects/markdown/"&gt;markdown&lt;/a&gt; разметку текста.
Для того, чтобы при генерации &lt;code&gt;html&lt;/code&gt; заголовкам присваивались якоря - необходимо
подключить расширение
&lt;a href="https://pythonhosted.org/Markdown/extensions/toc.html"&gt;Table of Contents&lt;/a&gt;.
Делается это элементарно прописав в &lt;code&gt;pelicanconf.py&lt;/code&gt; следующую&amp;nbsp;строчку:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;markdown.extensions.toc&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь при генерации &lt;code&gt;html&lt;/code&gt; каждому заголовку будет присваиваться &lt;code&gt;id&lt;/code&gt;
содержащимся текстом.&amp;nbsp;Заголовок:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##Markdown anchors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Будет сгенерирован в такой &lt;code&gt;html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;markdown-anchors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Markdown&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;anchors&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="ssylki-v-zagolovkakh"&gt;&lt;a class="toclink" href="#ssylki-v-zagolovkakh"&gt;Ссылки в&amp;nbsp;заголовках&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Чтобы заголовки были непросто тегами &lt;code&gt;h1&lt;/code&gt; &amp;#8230; &lt;code&gt;h6&lt;/code&gt;, а содержали ссылку на
самих себя нужно добавить аргумент &lt;code&gt;anchorlink&lt;/code&gt;. Теперь конфигурация
&lt;code&gt;MD_EXTENSIONS&lt;/code&gt; выглядит&amp;nbsp;так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;markdown.extensions.toc(anchorlink=True)&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Заголовок:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##Markdown anchors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Будет сгенерирован в такой &lt;code&gt;html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;markdown-anchors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toclink&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#markdown-anchors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Markdown&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;anchors&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="kirillitsa-v-zagolovkakh"&gt;&lt;a class="toclink" href="#kirillitsa-v-zagolovkakh"&gt;Кириллица в&amp;nbsp;заголовках&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;К сожалению, стандартный &lt;code&gt;slugify&lt;/code&gt; который используется в &lt;code&gt;markdown toc&lt;/code&gt; не
умеет обрабатывать кириллические символы, и поэтому&amp;nbsp;заголовок.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##Ссылка в заголовке
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Будет сгенерирован в такой &lt;code&gt;html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toclink&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#_1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Ссылка в&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;заголовке&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Что бы исправить это, можно воспользоваться библиотекой
&lt;a href="https://pypi.python.org/pypi/python-slugify"&gt;python slugify&lt;/a&gt;, задав
&lt;code&gt;TocExtension&lt;/code&gt; объект &lt;code&gt;slugify&lt;/code&gt;. Объект &lt;code&gt;slugify&lt;/code&gt; должен быть &lt;code&gt;callable&lt;/code&gt;
поэтому не обойтись просто строковым указанием аргументов, придется явно
импортировать и указывать в конструкторе аргументы для&amp;nbsp;расширения:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.extensions.toc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TocExtension&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;slugify&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;
&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;TocExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;anchorlink&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="meniu-avto-soderzhaniia"&gt;&lt;a class="toclink" href="#meniu-avto-soderzhaniia"&gt;Меню авто&amp;nbsp;содержания&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Для навигации по заголовкам будем использовать &lt;code&gt;jQuery plugin&lt;/code&gt;
&lt;a href="http://renaysha.me/anchorific-js/"&gt;Anchorific.js&lt;/a&gt;. Данный плагин умеет
самостоятельно присваивать &lt;code&gt;id&lt;/code&gt; заголовкам, но поскольку заголовки уже
сгенерированы с якорями, то создание ссылок джаваскриптом использоваться
не будет, в конструкторе укажем &lt;code&gt;null&lt;/code&gt; значения для текста и позиции ссылки
в&amp;nbsp;заголовке.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article.content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;anchorific&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;anchorClass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anchorText&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anchor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Так же пришлось немного подправить напильником этот плагин, под конкретные задачи,
например заставить его искать не все заголовки, а только с&amp;nbsp;идентификаторами.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;- self.headers = self.$elem.find( &amp;#39;h1, h2, h3, h4, h5, h6&amp;#39; );&lt;/span&gt;
&lt;span class="gi"&gt;+ self.headers = self.$elem.find( &amp;#39;h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]&amp;#39; );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="lipuchee-meniu"&gt;&lt;a class="toclink" href="#lipuchee-meniu"&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Липучее&amp;#8221;&amp;nbsp;меню&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Для того, что бы при скроллинге страницы меню навигации всегда оставалось
доступным будем использовать &lt;code&gt;position: fixed;&lt;/code&gt;, но присваивать его только
при достижении вершины объекта при&amp;nbsp;скроллинге.&lt;/p&gt;
&lt;p&gt;Создадим класс &lt;code&gt;sticky&lt;/code&gt; и будем навешивать его по событию&amp;nbsp;скролл.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nc"&gt;.sticky&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;33px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;z-index&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;$sticky&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div.anchorific&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;sticky_top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$sticky&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;$window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$sticky&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggleClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sticky&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sticky_top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Получилось такое авто&amp;nbsp;содержание:&lt;/p&gt;
&lt;p&gt;&lt;img alt="nav" class="center" src="/media/md-headers/nav.png" /&gt;&lt;/p&gt;</summary><category term="python"></category><category term="pelican"></category><category term="markdown"></category><category term="md"></category><category term="autonav"></category><category term="anchor"></category><category term="javascript"></category><category term="css"></category></entry><entry><title>Ура, меня в гугле забанили…</title><link href="https://samael500.github.io/articles/drugoe/ura-menia-v-gugle-zabanili/" rel="alternate"></link><published>2015-01-30T15:00:00+03:00</published><author><name>Maks</name></author><id>tag:samael500.github.io,2015-01-30:articles/drugoe/ura-menia-v-gugle-zabanili/</id><summary type="html">&lt;p&gt;&lt;img alt="google-ban" class="center" src="/media/google-ban/google_ban.png" /&gt;&lt;/p&gt;
&lt;p&gt;В связи с наложенными западными компаниями санкциями на Крым,
у меня перестала работать часть сервисов&amp;nbsp;гугла.&lt;/p&gt;
&lt;p&gt;Старый анекдот про &amp;#8220;в гугле забанили&amp;#8221; начинает быть похожим на&amp;nbsp;действительность.&lt;/p&gt;
&lt;p&gt;При попытке перейти получаем 403. Некоторые из заблокированных&amp;nbsp;ресурсов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/"&gt;https://code.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/"&gt;https://developers.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.developers.google.com/"&gt;https://console.developers.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/"&gt;https://developer.android.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/"&gt;https://cloud.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appengine.google.com/"&gt;https://appengine.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/"&gt;https://golang.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://angularjs.org/"&gt;https://angularjs.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Так же не работают в целом сайты размещенные на &lt;code&gt;gae&lt;/code&gt;,
например &lt;a href="https://www.udacity.com/"&gt;https://www.udacity.com/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Не работает обновление &lt;code&gt;google chrome&lt;/code&gt; и приложений из плей&amp;nbsp;маркета.&lt;/p&gt;
&lt;p&gt;Ну что ж, прокси и впн-ы никто не отменял,
при необходимости доступ к ресурсам получить будет&amp;nbsp;можно.&lt;/p&gt;</summary></entry></feed>